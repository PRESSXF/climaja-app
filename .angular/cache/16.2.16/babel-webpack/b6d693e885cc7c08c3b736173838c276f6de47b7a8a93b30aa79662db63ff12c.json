{"ast":null,"code":"import { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ClimaService = /*#__PURE__*/(() => {\n  class ClimaService {\n    constructor(http // Injeção do HttpClient para fazer requisições HTTP\n    ) {\n      this.http = http;\n      // URL base da API OpenWeatherMap\n      this.apiUrl = environment.openWeatherMapUrl;\n      // Chave da API (em produção, deve ser armazenada em variáveis de ambiente)\n      this.apiKey = environment.openWeatherMapApiKey;\n    }\n    /**\r\n     * Busca o clima atual de uma cidade\r\n     * @param cidade Nome da cidade para buscar o clima\r\n     * @returns Observable com os dados do clima atual\r\n     */\n    getClimaAtual(cidade) {\n      // Monta a URL com os parâmetros necessários\n      const url = `${this.apiUrl}/weather?q=${cidade}&appid=${this.apiKey}&units=metric&lang=pt_br`;\n      return this.http.get(url);\n    }\n    /**\r\n     * Busca a previsão do tempo para 5 dias de uma cidade\r\n     * @param cidade Nome da cidade para buscar a previsão\r\n     * @returns Observable com os dados da previsão do tempo\r\n     */\n    getPrevisao5Dias(cidade) {\n      // Monta a URL com os parâmetros necessários\n      const url = `${this.apiUrl}/forecast?q=${cidade}&appid=${this.apiKey}&units=metric&lang=pt_br`;\n      return this.http.get(url);\n    }\n    static {\n      this.ɵfac = function ClimaService_Factory(t) {\n        return new (t || ClimaService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: ClimaService,\n        factory: ClimaService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return ClimaService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}